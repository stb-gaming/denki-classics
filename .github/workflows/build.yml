name: Build and Release Electron Application

on:
  push:
    branches:
      - master
      - develop
      - 'feature/design'
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.16.1

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run buildWindows

      - name: Get package info
        id: package_info
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: ./dist/denki-classics*

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.16.1

      - name: Install dependencies
        run: npm ci

      - name: Build Linux
        run: npm run buildLinux

      - name: Get package info
        id: package_info
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifact
          path: ./dist/denki-classics*

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.16.1

      - name: Install dependencies
        run: npm ci

      - name: Build macOS
        run: npm run buildMac

      - name: Get package info
        id: package_info
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-artifact
          path: ./dist/denki-classics*

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/design' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.16.1

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-artifact
          path: ./dist/

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-artifact
          path: ./dist/

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-artifact
          path: ./dist/

      - name: Get package info
        id: package_info
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Check Package List
        run: ls dist

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          release_name: |
            ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/feature/design' }}Pre-release ${{ steps.package_info.outputs.version }}
          body: |
            ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/feature/design' }}Pre-release ${{ steps.package_info.outputs.version }} |
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/master' }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            ./dist/denki-classics ${{ steps.package_info.outputs.version }}.exe,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}.AppImage,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}.pkg,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}-win.zip,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}-ia32-win.zip,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}.tar.gz,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}-mac.zip,
            ./dist/denki-classics-${{ steps.package_info.outputs.version }}-mac.zip.blockmap
          asset_name: |
            denki-classics-${{ steps.package_info.outputs.version }}-windows.exe,
            denki-classics-${{ steps.package_info.outputs.version }}-linux.AppImage,
            denki-classics-${{ steps.package_info.outputs.version }}-mac.pkg,
            denki-classics-${{ steps.package_info.outputs.version }}-win64.zip,
            denki-classics-${{ steps.package_info.outputs.version }}-win32.zip,
            denki-classics-${{ steps.package_info.outputs.version }}-linux.tar.gz
            denki-classics-${{ steps.package_info.outputs.version }}-mac.zip,
            denki-classics-${{ steps.package_info.outputs.version }}-mac.zip.blockmap
          asset_content_type: application/octet-stream
