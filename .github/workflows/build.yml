name: Build and Release Electron Application

on:
  push:
    branches:
      - master
      - develop
      - 'feature/design'
  pull_request:
    types:
      - opened
      - synchronize
  release:
    types:
      - published

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            buildScript: buildWindows
            releaseFileExtension: .exe
          - os: ubuntu-latest
            buildScript: buildLinux
            releaseFileExtension: .AppImage
          - os: macos-latest
            buildScript: buildMac
            releaseFileExtension: .pkg

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.16.1

      - name: Install dependencies
        run: npm ci

      - name: Build Electron application
        run: npm run ${{ matrix.buildScript }}

      - name: Get package version
        id: package_version
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Create release
        if: ${{ github.ref == 'refs/heads/master' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          release_name: Release ${{ steps.package_version.outputs.version }}
          body: |
            Release ${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Create pre-release
        if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/design' }}
        id: create_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          release_name: Pre-release ${{ steps.package_version.outputs.version }}
          body: |
            Pre-release ${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: true

      - name: Upload release asset
        if: ${{ github.event_name == 'release' && github.event.action == 'published' && steps.create_release.outputs.release_id }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/denki-classics-${{ steps.package_version.outputs.version }}${{ matrix.releaseFileExtension }}
          asset_name: denki-classics-${{ steps.package_version.outputs.version }}${{ matrix.releaseFileExtension }}

      - name: Upload pre-release asset
        if: ${{ github.event_name == 'release' && github.event.action == 'published' && steps.create_prerelease.outputs.release_id }}
        id: upload-prelease-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
          asset_path: ./dist/denki-classics-${{ steps.package_version.outputs.version }}${{ matrix.releaseFileExtension }}
          asset_name: denki-classics-${{ steps.package_version.outputs.version }}${{ matrix.releaseFileExtension }}
