name: Build and Release Electron Application

on:
  push:
    branches:
      - master
      - develop
      - 'feature/design'
  pull_request:
    types:
      - opened
      - synchronize
env:
  NODE_VERSION: 18.16.1

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build Electron application for Windows
        run: npm run buildWindows

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: ./dist/denki-classics*

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build Electron application for Linux
        run: npm run buildLinux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifact
          path: ./dist/denki-classics*

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build Electron application for macOS
        run: npm run buildMac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v2
        with:
          name: mac-artifact
          path: ./dist/denki-classics*

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master'||github.ref == 'refs/heads/develop'||github.ref == 'refs/heads/feature/design' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Check Package List
        run: ls dist

      - name: Get package info
        id: package_info
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          release_name: Release ${{ steps.package_info.outputs.version }}
          body: |
            Release ${{ steps.package_info.outputs.version }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/master' }}

      - name: Upload Windows executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics ${{ steps.package_info.outputs.version }}.exe"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-windows.exe"
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}.AppImage"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-linux.AppImage"
          asset_content_type: application/octet-stream

      - name: Upload macOS pkg file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}.pkg"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-mac.pkg"
          asset_content_type: application/octet-stream

      - name: Upload Windows 64-bit archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}-win.zip"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-win64.zip"
          asset_content_type: application/octet-stream

      - name: Upload Windows 32-bit archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}-ia32-win.zip"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-win32.zip"
          asset_content_type: application/octet-stream

      - name: Upload Linux archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}.tar.gz"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-linux.tar.gz"
          asset_content_type: application/octet-stream

      - name: Upload macOS archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}-mac.zip"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-mac.zip"
          asset_content_type: application/octet-stream

      - name: Upload macOS archive blockmap
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./dist/denki-classics-${{ steps.package_info.outputs.version }}-mac.zip.blockmap"
          asset_name: "denki-classics-${{ steps.package_info.outputs.version }}-mac.zip.blockmap"
          asset_content_type: application/octet-stream
