name: Build Electron Application

on:
  push:
    branches:
      - master
      - develop
      - feature/design
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            buildScript: buildWindows
            releaseFileExtension: .exe
          - os: ubuntu-latest
            buildScript: buildLinux
            releaseFileExtension: .AppImage
          - os: macos-latest
            buildScript: buildMac
            releaseFileExtension: .pkg

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Node.js version
        id: get_node_version
        run: |
          if [ -f ".node-version" ]; then
            node_version=$(<.node-version)
          node-version: ${{ steps.get_node_version.outputs.node_version }}
            if [ "$RUNNER_OS" == "Windows" ]; then
              node_version=$(Get-Content .nvmrc).Trim()
            else
              node_version=$(cat .nvmrc)
            fi
          fi
          node_version="${node_version//v/}" # Remove 'v' prefix if present
          echo "::set-output name=node_version::$node_version"

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get_node_version.outputs.node_version }}

      - name: Install dependencies
        run: npm ci

      - name: Build Electron application
        run: npm run ${{ matrix.buildScript }}

      - name: Create release
        if: ${{ github.ref == 'refs/heads/master' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Create pre-release
        if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/design' }}
        id: create_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Pre-release ${{ github.ref }}
          body: |
            Pre-release ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload release asset
        if: steps.create_release.outputs.release_id && matrix.os == 'windows-latest'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/denki-classics-${{ github.sha }}${{ matrix.releaseFileExtension }}
          asset_name: denki-classics-${{ github.sha }}${{ matrix.releaseFileExtension }}
          asset_content_type: application/octet-stream
